#!/bin/bash

## {{{ ---- [ Globals ] ----------------------------------------------------------------------------

# File to log stdout/stderr to
#
LOG_FILE="/var/log/cloud-startup.log"

## {{{ PKG_PURGE[]
#
# *Complete* list of packages to purge
PKG_PURGE=(
  apparmor
  apport
  bcache-tools
  binutils
  bsdextrautils
  btrfs-progs
  chrony
  cloud-guest-utils
  command-not-found
  dbus-user-session
  dmidecode
  eatmydata
  eject
  ethtool
  ftp
  fuse3
  gir1.2-packagekitglib-1.0
  google-compute-engine
  google-compute-engine-oslogin
  google-guest-agent
  google-osconfig-agent
  hdparm
  landscape-common
  linux-headers-gcp
  # ---- FIXME ----
  linux-gcp-6.5-headers-6.5.0-1022
  linux-headers-6.5.0-1022-gcp
  # ---- /FIXME ----
  lvm2
  lxd-agent-loader
  mdadm
  netcat-openbsd
  ntfs-3g
  nvme-cli
  open-iscsi
  open-vm-tools
  openssh-sftp-server
  packagekit
  pastebinit
  pinentry-curses
  pkexec
  plymouth
  plymouth-theme-ubuntu-text
  policykit-1
  polkitd
  powermgmt-base
  publicsuffix
  python-babel-localedata
  run-one
  sg3-utils
  snapd
  software-properties-common
  sosreport
  squashfs-tools
  tcl
  tcl8.6
  thin-provisioning-tools
  tnftp
  ubuntu-advantage-tools
  ubuntu-pro-client
  ufw
  unattended-upgrades
  update-manager-core
  update-notifier-common
  usb-modeswitch
  usb.ids
  usbutils
  xauth
  xdg-user-dirs
  xkb-data
  zerofree
)
#
# END of PKG_PURGE[] }}}

## {{{ PKG_INSTALL[]
#
# List of packages to ensure are installed
PKG_INSTALL=(
  byobu
  console-setup
  curl
  git
  less
  make
  linux-modules-extra-gcp
  openssh-server
  vim
)
#
# END of PKG_INSTALL[] }}}

# Make `dpkg` work non-interactively
export DEBIAN_FRONTEND=noninteractive

## {{{ APT_OPTS[]
#
# Options to pass to `apt-get` so as to:
#
#   - Disable colours
#   - Disable fancy progress bars
#   - Try and make apt-get/dpkg as non-interactive as possible
#
APT_OPTS=(
  '-o' 'Dpkg::Options::=--force-confdef'
  '-o' 'Dpkg::Options::=--force-confold'
  '-o' 'Dpkg::Progress-Fancy=false'
  '-o' 'APT::Color=false'
)
#
## END of APT_OPTS[] }}}

## }}} ---- [ Globals ] ----------------------------------------------------------------------------

## {{{ ---- [ Functions ] --------------------------------------------------------------------------

## {{{ purge_package()
function purge_package()
{
  local pkg="$1"
  apt-get purge "$pkg" -y
}
## }}}

## {{{ purge_packages()
function purge_packages()
{
  apt-get purge "$@" -y
}
## }}}

## {{{ purge_orhpaned_packages()
function purge_orhpaned_packages()
{
  apt-get autoremove --purge -y
}
## }}}

## {{{ snap_remove_all()
function snap_remove_all()
{
  snap list |grep -v ^Name |awk '{print $1}' |while read snap
  do
    snap remove --purge $snap \
      || warn "$snap: snap remove --purge returned non-zero"
  done
}
## }}}

## {{{ running_services()                                                                                                                                                    
function running_services()                                                                                                                                                  
{                                                                                                                                                                            
  systemctl list-units \
    |grep '^.*\.service[[:space:]]\+loaded.*running' \
    |awk '{print $1}'                                                                                                                                                        
}                                                                                                                                                                            
## }}}

## {{{ print_running_services()
function print_running_services()
{
  echo -e "BEGIN running service list\n"

  for s in $(running_services)
  do
    echo "$s"
  done
  echo

  echo -e "END running service list\n"
}
## }}}

## {{{ print_running_processes()
function print_running_processes()
{
  echo -e "BEGIN running processes list\n"

  # Print process list with ps(1), skipping over processes whose names are of
  # the form `[STRING]` (i.e., kernel threads)
  #
  ps -ax -o uid -o pid -o cmd |awk '$NF!~/^\[.+\]$/'

  echo -e "END running processes list\n"
}
## }}}

## }}} ---- [ Functions ] --------------------------------------------------------------------------

# Ensure $HOME is set
[[ -z $HOME ]] && export HOME=/root

# Make sure this script runs once only
#
# FIXME: Disabled for the moment, re-enable once ported to modern Debian/Ubuntu
[[ -f /var/lib/cloud-startup.executed ]] && exit 0
touch /var/lib/cloud-startup.executed

# Rediect stdout/stderr to `$LOG_FILE`
exec > >(tee -a "$LOG_FILE") 2>&1

# Print updated list of running services pre-purge to stdout
print_running_services

# Before attempting to do anything apt-related, stop the `unattended-upgrades`
# service
service unattended-upgrades stop

# Remove (and purge) all snaps
snap_remove_all

# Purge unwanted packages so as to thrink the VM's root fs as much as possible
purge_packages "${PKG_PURGE[@]}"

# Purge all Python-related packages
#apt-get purge $(dpkg -l |awk '{print $2}' |grep python) -y

# Auto-remove packages that are no longer needed (i.e., orphanned)
apt-get autoremove --purge -y

# Install dependencies.  We need to re-install `openssh-server` below because
# it has most definitely been removed by the exhaustive purge of everything
# listed in `$PKG_PURGE`
apt-get -yq ${APT_OPTS[@]} update
apt-get -yq ${APT_OPTS[@]} install "${PKG_INSTALL[@]}"

# Remove .deb archives from /car/cache
apt-get clean

# Clone cloud-boot git repo and install to /usr/local
git clone --depth=1 https://github.com/destinatech/cloud-to-ram /var/tmp/cloud-to-ram
make -C /var/tmp/cloud-to-ram all install{,-systemd-service}
rm -rf /var/tmp/cloud-to-ram

# Recreate /root/.ssh and pupulate /root/.ssh/authorized_keys
[[ -d /root/.ssh ]] || mkdir -m0700 /root/.ssh
touch /root/.ssh/authorized_keys
chmod 0600 /root/.ssh/authorized_keys
for ssh_dir in /home/*
do
  [[ -f $ssh_dir/.ssh/authorized_keys ]] || continue
  cat "$ssh_dir/.ssh/authorized_keys" >> /root/.ssh/authorized_keys
done

# Loosen `MaxAuthTries` in /etc/ssh/sshd_config
sed -i -e 's/^#MaxAuthTries.*/MaxAuthTries 50/' /etc/ssh/sshd_config
service ssh restart

# Reload systemd
systemctl daemon-reload



# Print updated list of running services post-purge to stdout
print_running_services

# Print list of running processes
print_running_processes

# Finally, start cloud-to-ram.service
systemctl start cloud-to-ram.service

exit 0

#
# vim: ts=2 sw=2 et fdm=marker :
